"""
TweetTag automatically generated by SDKgen please do not edit this file manually
https://sdkgen.app
"""

import requests
import sdkgen
from requests import RequestException
from typing import List
from typing import Dict
from typing import Any
from urllib.parse import parse_qs

from .fields import Fields
from .hide_reply import HideReply
from .hide_reply_response import HideReplyResponse
from .tweet import Tweet
from .tweet_collection import TweetCollection
from .tweet_create_response import TweetCreateResponse
from .tweet_delete_response import TweetDeleteResponse
from .tweet_entity import TweetEntity
from .user_collection import UserCollection

class TweetTag(sdkgen.TagAbstract):
    def __init__(self, http_client: requests.Session, parser: sdkgen.Parser):
        super().__init__(http_client, parser)


    def get_all(self, ids: str, expansions: str, fields: Fields) -> TweetCollection:
        """
        Returns a variety of information about the Tweet specified by the requested ID or list of IDs.
        """
        try:
            path_params = {}

            query_params = {}
            query_params['ids'] = ids
            query_params['expansions'] = expansions
            query_params['fields'] = fields

            query_struct_names = []
            query_struct_names.append('fields')

            url = self.parser.url('/2/tweets', path_params)

            options = {}
            options['headers'] = {}
            options['params'] = self.parser.query(query_params, query_struct_names)



            response = self.http_client.request('GET', url, **options)

            if response.status_code >= 200 and response.status_code < 300:
                data = TweetCollection.model_validate_json(json_data=response.content)

                return data

            statusCode = response.status_code
            raise sdkgen.UnknownStatusCodeException('The server returned an unknown status code: ' + str(statusCode))
        except RequestException as e:
            raise sdkgen.ClientException('An unknown error occurred: ' + str(e))

    def get(self, tweet_id: str, expansions: str, fields: Fields) -> TweetEntity:
        """
        Returns a variety of information about a single Tweet specified by the requested ID.
        """
        try:
            path_params = {}
            path_params['tweet_id'] = tweet_id

            query_params = {}
            query_params['expansions'] = expansions
            query_params['fields'] = fields

            query_struct_names = []
            query_struct_names.append('fields')

            url = self.parser.url('/2/tweets/:tweet_id', path_params)

            options = {}
            options['headers'] = {}
            options['params'] = self.parser.query(query_params, query_struct_names)



            response = self.http_client.request('GET', url, **options)

            if response.status_code >= 200 and response.status_code < 300:
                data = TweetEntity.model_validate_json(json_data=response.content)

                return data

            statusCode = response.status_code
            raise sdkgen.UnknownStatusCodeException('The server returned an unknown status code: ' + str(statusCode))
        except RequestException as e:
            raise sdkgen.ClientException('An unknown error occurred: ' + str(e))

    def create(self, payload: Tweet) -> TweetCreateResponse:
        """
        Creates a Tweet on behalf of an authenticated user.
        """
        try:
            path_params = {}

            query_params = {}

            query_struct_names = []

            url = self.parser.url('/2/tweets', path_params)

            options = {}
            options['headers'] = {}
            options['params'] = self.parser.query(query_params, query_struct_names)

            options['json'] = payload.model_dump(by_alias=True)

            options['headers']['Content-Type'] = 'application/json'

            response = self.http_client.request('POST', url, **options)

            if response.status_code >= 200 and response.status_code < 300:
                data = TweetCreateResponse.model_validate_json(json_data=response.content)

                return data

            statusCode = response.status_code
            raise sdkgen.UnknownStatusCodeException('The server returned an unknown status code: ' + str(statusCode))
        except RequestException as e:
            raise sdkgen.ClientException('An unknown error occurred: ' + str(e))

    def delete(self, tweet_id: str) -> TweetDeleteResponse:
        """
        Allows a user or authenticated user ID to delete a Tweet.
        """
        try:
            path_params = {}
            path_params['tweet_id'] = tweet_id

            query_params = {}

            query_struct_names = []

            url = self.parser.url('/2/tweets/:tweet_id', path_params)

            options = {}
            options['headers'] = {}
            options['params'] = self.parser.query(query_params, query_struct_names)



            response = self.http_client.request('DELETE', url, **options)

            if response.status_code >= 200 and response.status_code < 300:
                data = TweetDeleteResponse.model_validate_json(json_data=response.content)

                return data

            statusCode = response.status_code
            raise sdkgen.UnknownStatusCodeException('The server returned an unknown status code: ' + str(statusCode))
        except RequestException as e:
            raise sdkgen.ClientException('An unknown error occurred: ' + str(e))

    def hide_reply(self, tweet_id: str, payload: HideReply) -> HideReplyResponse:
        """
        Hides or unhides a reply to a Tweet.
        """
        try:
            path_params = {}
            path_params['tweet_id'] = tweet_id

            query_params = {}

            query_struct_names = []

            url = self.parser.url('/2/tweets/:tweet_id/hidden', path_params)

            options = {}
            options['headers'] = {}
            options['params'] = self.parser.query(query_params, query_struct_names)

            options['json'] = payload.model_dump(by_alias=True)

            options['headers']['Content-Type'] = 'application/json'

            response = self.http_client.request('PUT', url, **options)

            if response.status_code >= 200 and response.status_code < 300:
                data = HideReplyResponse.model_validate_json(json_data=response.content)

                return data

            statusCode = response.status_code
            raise sdkgen.UnknownStatusCodeException('The server returned an unknown status code: ' + str(statusCode))
        except RequestException as e:
            raise sdkgen.ClientException('An unknown error occurred: ' + str(e))

    def get_liking_users(self, tweet_id: str, expansions: str, max_results: int, pagination_token: str) -> UserCollection:
        """
        Allows you to get information about a Tweetâ€™s liking users.
        """
        try:
            path_params = {}
            path_params['tweet_id'] = tweet_id

            query_params = {}
            query_params['expansions'] = expansions
            query_params['max_results'] = max_results
            query_params['pagination_token'] = pagination_token

            query_struct_names = []

            url = self.parser.url('/2/tweets/:tweet_id/liking_users', path_params)

            options = {}
            options['headers'] = {}
            options['params'] = self.parser.query(query_params, query_struct_names)



            response = self.http_client.request('GET', url, **options)

            if response.status_code >= 200 and response.status_code < 300:
                data = UserCollection.model_validate_json(json_data=response.content)

                return data

            statusCode = response.status_code
            raise sdkgen.UnknownStatusCodeException('The server returned an unknown status code: ' + str(statusCode))
        except RequestException as e:
            raise sdkgen.ClientException('An unknown error occurred: ' + str(e))



